<?php

require_once __DIR__ . '/../vendor/autoload.php';

use AnwarSaeed\InvoiceProcessor\Core\Container;
use AnwarSaeed\InvoiceProcessor\Core\CommandHandler;
use AnwarSaeed\InvoiceProcessor\Commands\ExportCommand;
use AnwarSaeed\InvoiceProcessor\Commands\ImportCommand;
use AnwarSaeed\InvoiceProcessor\Commands\SwitchDatabaseCommand;
use AnwarSaeed\InvoiceProcessor\Commands\SetupDatabaseCommand;

// Create container and resolve dependencies
$container = new Container();

// Create command handler
$commandHandler = new CommandHandler();

// Register commands with dependency injection
$commandHandler->registerCommand(new ExportCommand(
    $container->resolve(\AnwarSaeed\InvoiceProcessor\Contracts\Services\InvoiceServiceInterface::class)
));

$commandHandler->registerCommand(new ImportCommand(
    $container->resolve(\AnwarSaeed\InvoiceProcessor\Contracts\Services\InvoiceServiceInterface::class)
));

$commandHandler->registerCommand(new SwitchDatabaseCommand());
$commandHandler->registerCommand(new SetupDatabaseCommand());

// Parse command line arguments
$args = $argv;
$scriptName = array_shift($args);
$commandName = $args[0] ?? null;
$commandArgs = [];

// Parse command arguments for switch-database command
if ($commandName === 'switch-database' && isset($args[1])) {
    $commandArgs['database'] = $args[1];
} else {
    $commandArgs = array_slice($args, 1);
}

if (!$commandName) {
    echo "Available commands:\n";
    foreach ($commandHandler->getAvailableCommands() as $name => $description) {
        echo "  {$name}: {$description}\n";
    }
    exit(1);
}

try {
    $commandHandler->execute($commandName, $commandArgs);
} catch (\Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}